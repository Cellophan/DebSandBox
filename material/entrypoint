#!/bin/bash

set -Eeuo pipefail

stacktrace () { 
  echo "unhandled error. stacktrace:" 
   i=0 
   while caller $i; do 
     i=$((i+1)) 
   done 
}
trap "stacktrace" ERR 

[ ! -z "${DEBUG:-}" ] && set -vx

usage() {
  echo "A lot of options are needed to start this image.

  Default options for user are provided by: \"docker run --rm cell/debsandbox --cmd\"
  It s recommanded to use the start sript provided at the root of the repo. You can copy or link it to /usr/local/bin .

  Tools:
    $(find /usr/local/bin/ -type f -printf "%p " | sed 's/[^ ]*\/\([^/]*\) /\1 /g')

  Options:
    For using your user inside the container: -e USER=\$USER -e UID=\$(id --user) -e GID=\$(id --group)
    For being in the current directory: -w \$PWD -v \$PWD:\$PWD
    For SSH: -v \$HOME/.ssh:\$HOME/.ssh -v \$SSH_AUTH_SOCK:\$SSH_AUTH_SOCK -e SSH_AUTH_SOCK=\$SSH_AUTH_SOCK
    For git settings: -v \$HOME/.gitconfig:\$HOME/.gitconfig
    For using docker: -v \$(which docker):\$(which docker) -v /var/run/docker.sock:/var/run/docker.sock
    For allowing X applications: -v /tmp/.X11-unix:/tmp/.X11-unix
    For changing the default shell (if there s no command) -e SHELL=...
    For debug: -e DEBUG=1
"
}

if [ $# -eq 1 ]; then
  case "$1" in
    --help)
     usage
     exit 0 ;;
    --cmd)
     echo "docker run -ti --rm -w \$PWD -v \$PWD:\$PWD -v /etc/localtime:/etc/localtime:ro -v \$HOME/.ssh:\$HOME/.ssh -e USER=\$USER -e UID=\$(id --user) -e GID=\$(id --group) -v \$SSH_AUTH_SOCK:\$SSH_AUTH_SOCK -e SSH_AUTH_SOCK=\$SSH_AUTH_SOCK -v \$(which docker):\$(which docker) -v /var/run/docker.sock:/var/run/docker.sock -v /tmp/.X11-unix:/tmp/.X11-unix cell/debsandbox"
     exit 0 ;;
  esac
fi

#Default value
: ${SHELL:="/bin/bash"}
export WORKDIR=$PWD
export SSH_AUTH_SOCK
export SSH_AUTH_SOCK
[ ! -z "${DEBUG:-}" ] && echo "SSH_AUTH_SOCK: $SSH_AUTH_SOCK"

#Create user
if [ -z "${USER:-}" -o -z "${UID:-}" -o -z "${GID:-}" ]; then
  USER=notme
  groupadd $USER
  useradd  $USER --gid $USER
else
  groupadd $USER --gid $GID
  useradd  $USER --gid $GID --uid $UID
fi

#Permit the user to use docker if the socket is mounted
if [ -S /var/run/docker.sock -a ! -z "$(which docker)" ]; then
  groupadd docker --gid $(stat --format='%g' /var/run/docker.sock)
  usermod -aG docker $USER

  export DOCKER_CONTAINER=$(cat /proc/self/cgroup | grep "docker" | sed s/\\//\\n/g | tail -1 | sed 's/^.*-\([a-fA-F0-9]*\)\..*$/\1/')
  export DOCKER_IMAGE=$(docker inspect -f '{{.Config.Image}}' ${DOCKER_CONTAINER})
  export DOCKER_IMAGE_FRESHNESS=$(expr \( $(date "+%s") - $(date -d "$(docker inspect -f '{{.Created}}' ${DOCKER_IMAGE} | cut -d\  -f1-3)" "+%s") \) )
fi

#Detect if the home directory is mounted
if [ ! -d /home/${USER} ]; then
  mkdir /home/${USER}
fi
if [ $(stat -c "%u" /home/${USER}) -eq 0 ]; then
  IS_HOME_MOUNTED=false
  chown ${USER} /home/${USER}
else
  IS_HOME_MOUNTED=true
fi
export IS_HOME_MOUNTED

#Declare DISPLAY if the X socket is mounted
if [ -S /tmp/.X11-unix ]; then
  export DISPLAY=${DISPLAY:-:0}
fi

for i in /etc/profile.d/*.sh ; do
  if [ -r $i ]; then
    . $i
  fi
done
unset i

echo "$USER ALL = NOPASSWD: ALL" >/etc/sudoers.d/full-sudo
chmod 0440 /etc/sudoers.d/full-sudo

if [ $# -eq 0 ]; then
  exec su $USER --shell $SHELL
else
  exec su $USER <<EOF
$@
EOF

fi

